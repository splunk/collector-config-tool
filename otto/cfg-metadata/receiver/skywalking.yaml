type: '*skywalkingreceiver.Config'
doc: |
  Config defines configuration for skywalking receiver.
fields:
- name: protocols
  type: skywalkingreceiver.Protocols
  kind: struct
  doc: |
    Protocols is the configuration for the supported protocols.
  fields:
  - name: grpc
    type: '*configgrpc.GRPCServerSettings'
    kind: ptr
    doc: |
      GRPCServerSettings defines common settings for a gRPC server configuration.
    fields:
    - name: endpoint
      kind: string
      default: 0.0.0.0:11800
      doc: |
        Endpoint configures the address for this network connection.
        For TCP and UDP networks, the address has the form "host:port". The host must be a literal IP address,
        or a host name that can be resolved to IP addresses. The port must be a literal port number or a service name.
        If the host is a literal IPv6 address it must be enclosed in square brackets, as in "[2001:db8::1]:80" or
        "[fe80::1%zone]:80". The zone specifies the scope of the literal IPv6 address as defined in RFC 4007.
    - name: transport
      kind: string
      default: tcp
      doc: |
        Transport to use. Known protocols are "tcp", "tcp4" (IPv4-only), "tcp6" (IPv6-only), "udp", "udp4" (IPv4-only),
        "udp6" (IPv6-only), "ip", "ip4" (IPv4-only), "ip6" (IPv6-only), "unix", "unixgram" and "unixpacket".
    - name: tls
      type: '*configtls.TLSServerSetting'
      kind: ptr
      doc: |
        Configures the protocol to use TLS.
        The default value is nil, which will cause the protocol to not use TLS.
      fields:
      - name: ca_file
        kind: string
        default: ""
        doc: |
          Path to the CA cert. For a client this verifies the server certificate.
          For a server this verifies client certificates. If empty uses system root CA.
          (optional)
      - name: cert_file
        kind: string
        default: ""
        doc: |
          Path to the TLS cert to use for TLS required connections. (optional)
      - name: key_file
        kind: string
        default: ""
        doc: |
          Path to the TLS key to use for TLS required connections. (optional)
      - name: min_version
        kind: string
        default: ""
        doc: |
          MinVersion sets the minimum TLS version that is acceptable.
          If not set, TLS 1.2 will be used. (optional)
      - name: max_version
        kind: string
        default: ""
        doc: |
          MaxVersion sets the maximum TLS version that is acceptable.
          If not set, refer to crypto/tls for defaults. (optional)
      - name: reload_interval
        type: time.Duration
        kind: int64
        doc: |
          ReloadInterval specifies the duration after which the certificate will be reloaded
          If not set, it will never be reloaded (optional)
      - name: client_ca_file
        kind: string
        default: ""
        doc: |
          Path to the TLS cert to use by the server to verify a client certificate. (optional)
          This sets the ClientCAs and ClientAuth to RequireAndVerifyClientCert in the TLSConfig. Please refer to
          https://godoc.org/crypto/tls#Config for more information. (optional)
    - name: max_recv_msg_size_mib
      kind: uint64
      default: 0
      doc: |
        MaxRecvMsgSizeMiB sets the maximum size (in MiB) of messages accepted by the server.
    - name: max_concurrent_streams
      kind: uint32
      default: 0
      doc: |
        MaxConcurrentStreams sets the limit on the number of concurrent streams to each ServerTransport.
        It has effect only for streaming RPCs.
    - name: read_buffer_size
      kind: int
      doc: |
        ReadBufferSize for gRPC server. See grpc.ReadBufferSize.
        (https://godoc.org/google.golang.org/grpc#ReadBufferSize).
    - name: write_buffer_size
      kind: int
      doc: |
        WriteBufferSize for gRPC server. See grpc.WriteBufferSize.
        (https://godoc.org/google.golang.org/grpc#WriteBufferSize).
    - name: keepalive
      type: '*configgrpc.KeepaliveServerConfig'
      kind: ptr
      doc: |
        Keepalive anchor for all the settings related to keepalive.
      fields:
      - name: server_parameters
        type: '*configgrpc.KeepaliveServerParameters'
        kind: ptr
        doc: |
          KeepaliveServerParameters allow configuration of the keepalive.ServerParameters.
          The same default values as keepalive.ServerParameters are applicable and get applied by the server.
          See https://godoc.org/google.golang.org/grpc/keepalive#ServerParameters for details.
        fields:
        - name: max_connection_idle
          type: time.Duration
          kind: int64
        - name: max_connection_age
          type: time.Duration
          kind: int64
        - name: max_connection_age_grace
          type: time.Duration
          kind: int64
        - name: time
          type: time.Duration
          kind: int64
        - name: timeout
          type: time.Duration
          kind: int64
      - name: enforcement_policy
        type: '*configgrpc.KeepaliveEnforcementPolicy'
        kind: ptr
        doc: |
          KeepaliveEnforcementPolicy allow configuration of the keepalive.EnforcementPolicy.
          The same default values as keepalive.EnforcementPolicy are applicable and get applied by the server.
          See https://godoc.org/google.golang.org/grpc/keepalive#EnforcementPolicy for details.
        fields:
        - name: min_time
          type: time.Duration
          kind: int64
        - name: permit_without_stream
          kind: bool
          default: false
    - name: auth
      type: '*configauth.Authentication'
      kind: ptr
      doc: |
        Auth for this receiver
      fields:
      - name: authenticator
        type: config.ComponentID
        kind: struct
        doc: |
          AuthenticatorID specifies the name of the extension to use in order to authenticate the incoming data point.
    - name: include_metadata
      kind: bool
      default: false
      doc: |
        Include propagates the incoming connection's metadata to downstream consumers.
        Experimental: *NOTE* this option is subject to change or removal in the future.
  - name: http
    type: '*confighttp.HTTPServerSettings'
    kind: ptr
    doc: |
      HTTPServerSettings defines settings for creating an HTTP server.
    fields:
    - name: endpoint
      kind: string
      default: 0.0.0.0:12800
      doc: |
        Endpoint configures the listening address for the server.
    - name: tls
      type: '*configtls.TLSServerSetting'
      kind: ptr
      doc: |
        TLSSetting struct exposes TLS client configuration.
      fields:
      - name: ca_file
        kind: string
        default: ""
        doc: |
          Path to the CA cert. For a client this verifies the server certificate.
          For a server this verifies client certificates. If empty uses system root CA.
          (optional)
      - name: cert_file
        kind: string
        default: ""
        doc: |
          Path to the TLS cert to use for TLS required connections. (optional)
      - name: key_file
        kind: string
        default: ""
        doc: |
          Path to the TLS key to use for TLS required connections. (optional)
      - name: min_version
        kind: string
        default: ""
        doc: |
          MinVersion sets the minimum TLS version that is acceptable.
          If not set, TLS 1.2 will be used. (optional)
      - name: max_version
        kind: string
        default: ""
        doc: |
          MaxVersion sets the maximum TLS version that is acceptable.
          If not set, refer to crypto/tls for defaults. (optional)
      - name: reload_interval
        type: time.Duration
        kind: int64
        doc: |
          ReloadInterval specifies the duration after which the certificate will be reloaded
          If not set, it will never be reloaded (optional)
      - name: client_ca_file
        kind: string
        default: ""
        doc: |
          Path to the TLS cert to use by the server to verify a client certificate. (optional)
          This sets the ClientCAs and ClientAuth to RequireAndVerifyClientCert in the TLSConfig. Please refer to
          https://godoc.org/crypto/tls#Config for more information. (optional)
    - name: cors
      type: '*confighttp.CORSSettings'
      kind: ptr
      doc: |
        CORS configures the server for HTTP cross-origin resource sharing (CORS).
      fields:
      - name: allowed_origins
        type: '[]string'
        kind: slice
        doc: |
          AllowedOrigins sets the allowed values of the Origin header for
          HTTP/JSON requests to an OTLP receiver. An origin may contain a
          wildcard (*) to replace 0 or more characters (e.g.,
          "http://*.domain.com", or "*" to allow any origin).
      - name: allowed_headers
        type: '[]string'
        kind: slice
        doc: |
          AllowedHeaders sets what headers will be allowed in CORS requests.
          The Accept, Accept-Language, Content-Type, and Content-Language
          headers are implicitly allowed. If no headers are listed,
          X-Requested-With will also be accepted by default. Include "*" to
          allow any request header.
      - name: max_age
        kind: int
        doc: |
          MaxAge sets the value of the Access-Control-Max-Age response header.
          Set it to the number of seconds that browsers should cache a CORS
          preflight response for.
    - name: auth
      type: '*configauth.Authentication'
      kind: ptr
      doc: |
        Auth for this receiver
      fields:
      - name: authenticator
        type: config.ComponentID
        kind: struct
        doc: |
          AuthenticatorID specifies the name of the extension to use in order to authenticate the incoming data point.
    - name: max_request_body_size
      kind: int64
      doc: |
        MaxRequestBodySize sets the maximum request body size in bytes
    - name: include_metadata
      kind: bool
      default: false
      doc: |
        IncludeMetadata propagates the client metadata from the incoming requests to the downstream consumers
        Experimental: *NOTE* this option is subject to change or removal in the future.
