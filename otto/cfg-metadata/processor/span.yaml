type: '*spanprocessor.Config'
doc: |
  Config is the configuration for the span processor.
  Prior to any actions being applied, each span is compared against
  the include properties and then the exclude properties if they are specified.
  This determines if a span is to be processed or not.
fields:
- name: include
  type: '*filterconfig.MatchProperties'
  kind: ptr
  doc: |
    Include specifies the set of input data properties that must be present in order
    for this processor to apply to it.
    Note: If `exclude` is specified, the input data is compared against those
    properties after the `include` properties.
    This is an optional field. If neither `include` and `exclude` are set, all input data
    are processed. If `include` is set and `exclude` isn't set, then all
    input data matching the properties in this structure are processed.
  fields:
  - name: match_type
    type: filterset.MatchType
    kind: string
    default: ""
  - name: regexp
    type: '*regexp.Config'
    kind: ptr
    doc: |
      Config represents the options for a NewFilterSet.
    fields:
    - name: cacheenabled
      kind: bool
      default: false
      doc: |
        CacheEnabled determines whether match results are LRU cached to make subsequent matches faster.
        Cache size is unlimited unless CacheMaxNumEntries is also specified.
    - name: cachemaxnumentries
      kind: int
      doc: |
        CacheMaxNumEntries is the max number of entries of the LRU cache that stores match results.
        CacheMaxNumEntries is ignored if CacheEnabled is false.
  - name: services
    type: '[]string'
    kind: slice
    doc: |
      Services specify the list of items to match service name against.
      A match occurs if the span's service name matches at least one item in this list.
      This is an optional field.
  - name: span_names
    type: '[]string'
    kind: slice
    doc: |
      SpanNames specify the list of items to match span name against.
      A match occurs if the span name matches at least one item in this list.
      This is an optional field.
  - name: log_bodies
    type: '[]string'
    kind: slice
    doc: |
      LogBodies is a list of strings that the LogRecord's body field must match
      against.
  - name: log_severity_texts
    type: '[]string'
    kind: slice
    doc: |
      LogSeverityTexts is a list of strings that the LogRecord's severity text field must match
      against.
  - name: log_severity_number
    type: '*filterconfig.LogSeverityNumberMatchProperties'
    kind: ptr
    doc: |
      LogSeverityNumber defines how to match against a log record's SeverityNumber, if defined.
    fields:
    - name: min
      type: plog.SeverityNumber
      kind: int32
      doc: |
        Min is the lowest severity that may be matched.
        e.g. if this is plog.SeverityNumberInfo, INFO, WARN, ERROR, and FATAL logs will match.
    - name: match_undefined
      kind: bool
      default: false
      doc: |
        MatchUndefined controls whether logs with "undefined" severity matches.
        If this is true, entries with undefined severity will match.
  - name: metric_names
    type: '[]string'
    kind: slice
    doc: |
      MetricNames is a list of strings to match metric name against.
      A match occurs if metric name matches at least one item in the list.
      This field is optional.
  - name: attributes
    type: '[]filterconfig.Attribute'
    kind: slice
    doc: |
      Attributes specifies the list of attributes to match against.
      All of these attributes must match exactly for a match to occur.
      Only match_type=strict is allowed if "attributes" are specified.
      This is an optional field.
    fields:
    - name: key
      kind: string
      default: ""
      doc: |
        Key specifies the attribute key.
    - name: value
      type: interface {}
      kind: interface
      doc: |
        Values specifies the value to match against.
        If it is not set, any value will match.
  - name: resources
    type: '[]filterconfig.Attribute'
    kind: slice
    doc: |
      Resources specify the list of items to match the resources against.
      A match occurs if the data's resources match at least one item in this list.
      This is an optional field.
    fields:
    - name: key
      kind: string
      default: ""
      doc: |
        Key specifies the attribute key.
    - name: value
      type: interface {}
      kind: interface
      doc: |
        Values specifies the value to match against.
        If it is not set, any value will match.
  - name: libraries
    type: '[]filterconfig.InstrumentationLibrary'
    kind: slice
    doc: |
      Libraries specify the list of items to match the implementation library against.
      A match occurs if the span's implementation library matches at least one item in this list.
      This is an optional field.
    fields:
    - name: name
      kind: string
      default: ""
    - name: version
      type: '*string'
      kind: ptr
      doc: |
        version match
         expected actual  match
         nil      <blank> yes
         nil      1       yes
         <blank>  <blank> yes
         <blank>  1       no
         1        <blank> no
         1        1       yes
  - name: span_kinds
    type: '[]string'
    kind: slice
    doc: |
      SpanKinds specify the list of items to match the span kind against.
      A match occurs if the span's span kind matches at least one item in this list.
      This is an optional field
- name: exclude
  type: '*filterconfig.MatchProperties'
  kind: ptr
  doc: |
    Exclude specifies when this processor will not be applied to the input data
    which match the specified properties.
    Note: The `exclude` properties are checked after the `include` properties,
    if they exist, are checked.
    If `include` isn't specified, the `exclude` properties are checked against
    all input data.
    This is an optional field. If neither `include` and `exclude` are set, all input data
    is processed. If `exclude` is set and `include` isn't set, then all the
    input data that does not match the properties in this structure are processed.
  fields:
  - name: match_type
    type: filterset.MatchType
    kind: string
    default: ""
  - name: regexp
    type: '*regexp.Config'
    kind: ptr
    doc: |
      Config represents the options for a NewFilterSet.
    fields:
    - name: cacheenabled
      kind: bool
      default: false
      doc: |
        CacheEnabled determines whether match results are LRU cached to make subsequent matches faster.
        Cache size is unlimited unless CacheMaxNumEntries is also specified.
    - name: cachemaxnumentries
      kind: int
      doc: |
        CacheMaxNumEntries is the max number of entries of the LRU cache that stores match results.
        CacheMaxNumEntries is ignored if CacheEnabled is false.
  - name: services
    type: '[]string'
    kind: slice
    doc: |
      Services specify the list of items to match service name against.
      A match occurs if the span's service name matches at least one item in this list.
      This is an optional field.
  - name: span_names
    type: '[]string'
    kind: slice
    doc: |
      SpanNames specify the list of items to match span name against.
      A match occurs if the span name matches at least one item in this list.
      This is an optional field.
  - name: log_bodies
    type: '[]string'
    kind: slice
    doc: |
      LogBodies is a list of strings that the LogRecord's body field must match
      against.
  - name: log_severity_texts
    type: '[]string'
    kind: slice
    doc: |
      LogSeverityTexts is a list of strings that the LogRecord's severity text field must match
      against.
  - name: log_severity_number
    type: '*filterconfig.LogSeverityNumberMatchProperties'
    kind: ptr
    doc: |
      LogSeverityNumber defines how to match against a log record's SeverityNumber, if defined.
    fields:
    - name: min
      type: plog.SeverityNumber
      kind: int32
      doc: |
        Min is the lowest severity that may be matched.
        e.g. if this is plog.SeverityNumberInfo, INFO, WARN, ERROR, and FATAL logs will match.
    - name: match_undefined
      kind: bool
      default: false
      doc: |
        MatchUndefined controls whether logs with "undefined" severity matches.
        If this is true, entries with undefined severity will match.
  - name: metric_names
    type: '[]string'
    kind: slice
    doc: |
      MetricNames is a list of strings to match metric name against.
      A match occurs if metric name matches at least one item in the list.
      This field is optional.
  - name: attributes
    type: '[]filterconfig.Attribute'
    kind: slice
    doc: |
      Attributes specifies the list of attributes to match against.
      All of these attributes must match exactly for a match to occur.
      Only match_type=strict is allowed if "attributes" are specified.
      This is an optional field.
    fields:
    - name: key
      kind: string
      default: ""
      doc: |
        Key specifies the attribute key.
    - name: value
      type: interface {}
      kind: interface
      doc: |
        Values specifies the value to match against.
        If it is not set, any value will match.
  - name: resources
    type: '[]filterconfig.Attribute'
    kind: slice
    doc: |
      Resources specify the list of items to match the resources against.
      A match occurs if the data's resources match at least one item in this list.
      This is an optional field.
    fields:
    - name: key
      kind: string
      default: ""
      doc: |
        Key specifies the attribute key.
    - name: value
      type: interface {}
      kind: interface
      doc: |
        Values specifies the value to match against.
        If it is not set, any value will match.
  - name: libraries
    type: '[]filterconfig.InstrumentationLibrary'
    kind: slice
    doc: |
      Libraries specify the list of items to match the implementation library against.
      A match occurs if the span's implementation library matches at least one item in this list.
      This is an optional field.
    fields:
    - name: name
      kind: string
      default: ""
    - name: version
      type: '*string'
      kind: ptr
      doc: |
        version match
         expected actual  match
         nil      <blank> yes
         nil      1       yes
         <blank>  <blank> yes
         <blank>  1       no
         1        <blank> no
         1        1       yes
  - name: span_kinds
    type: '[]string'
    kind: slice
    doc: |
      SpanKinds specify the list of items to match the span kind against.
      A match occurs if the span's span kind matches at least one item in this list.
      This is an optional field
- name: name
  type: spanprocessor.Name
  kind: struct
  doc: |
    Rename specifies the components required to re-name a span.
    The `from_attributes` field needs to be set for this processor to be properly
    configured.
    Note: The field name is `Rename` to avoid collision with the Name() method
    from config.NamedEntity
  fields:
  - name: from_attributes
    type: '[]string'
    kind: slice
    doc: |
      FromAttributes represents the attribute keys to pull the values from to
      generate the new span name. All attribute keys are required in the span
      to re-name a span. If any attribute is missing from the span, no re-name
      will occur.
      Note: The new span name is constructed in order of the `from_attributes`
      specified in the configuration. This field is required and cannot be empty.
  - name: separator
    kind: string
    default: ""
    doc: |
      Separator is the string used to separate attributes values in the new
      span name. If no value is set, no separator is used between attribute
      values. Used with FromAttributes only.
  - name: to_attributes
    type: '*spanprocessor.ToAttributes'
    kind: ptr
    doc: |
      ToAttributes specifies a configuration to extract attributes from span name.
    fields:
    - name: rules
      type: '[]string'
      kind: slice
      doc: |
        Rules is a list of rules to extract attribute values from span name. The values
        in the span name are replaced by extracted attribute names. Each rule in the list
        is a regex pattern string. Span name is checked against the regex. If it matches
        then all named subexpressions of the regex are extracted as attributes
        and are added to the span. Each subexpression name becomes an attribute name and
        subexpression matched portion becomes the attribute value. The matched portion
        in the span name is replaced by extracted attribute name. If the attributes
        already exist in the span then they will be overwritten. The process is repeated
        for all rules in the order they are specified. Each subsequent rule works on the
        span name that is the output after processing the previous rule.
    - name: break_after_match
      kind: bool
      default: false
      doc: |
        BreakAfterMatch specifies if processing of rules should stop after the first
        match. If it is false rule processing will continue to be performed over the
        modified span name.
- name: status
  type: '*spanprocessor.Status'
  kind: ptr
  doc: |
    SetStatus specifies status which should be set for this span.
  fields:
  - name: code
    kind: string
    default: ""
    doc: |
      Code is one of three values "Ok" or "Error" or "Unset". Please check:
      https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/trace/api.md#set-status
  - name: description
    kind: string
    default: ""
    doc: |
      Description is an optional field documenting Error statuses.
