type: '*attributesprocessor.Config'
doc: |
  Config specifies the set of attributes to be inserted, updated, upserted and
  deleted and the properties to include/exclude a span from being processed.
  This processor handles all forms of modifications to attributes within a span, log, or metric.
  Prior to any actions being applied, each span is compared against
  the include properties and then the exclude properties if they are specified.
  This determines if a span is to be processed or not.
  The list of actions is applied in order specified in the configuration.
fields:
- name: include
  type: '*filterconfig.MatchProperties'
  kind: ptr
  doc: |
    Include specifies the set of input data properties that must be present in order
    for this processor to apply to it.
    Note: If `exclude` is specified, the input data is compared against those
    properties after the `include` properties.
    This is an optional field. If neither `include` and `exclude` are set, all input data
    are processed. If `include` is set and `exclude` isn't set, then all
    input data matching the properties in this structure are processed.
  fields:
  - name: match_type
    type: filterset.MatchType
    kind: string
    default: ""
  - name: regexp
    type: '*regexp.Config'
    kind: ptr
    doc: |
      Config represents the options for a NewFilterSet.
    fields:
    - name: cacheenabled
      kind: bool
      default: false
      doc: |
        CacheEnabled determines whether match results are LRU cached to make subsequent matches faster.
        Cache size is unlimited unless CacheMaxNumEntries is also specified.
    - name: cachemaxnumentries
      kind: int
      doc: |
        CacheMaxNumEntries is the max number of entries of the LRU cache that stores match results.
        CacheMaxNumEntries is ignored if CacheEnabled is false.
  - name: services
    type: '[]string'
    kind: slice
    doc: |
      Services specify the list of items to match service name against.
      A match occurs if the span's service name matches at least one item in this list.
      This is an optional field.
  - name: span_names
    type: '[]string'
    kind: slice
    doc: |
      SpanNames specify the list of items to match span name against.
      A match occurs if the span name matches at least one item in this list.
      This is an optional field.
  - name: log_bodies
    type: '[]string'
    kind: slice
    doc: |
      LogBodies is a list of strings that the LogRecord's body field must match
      against.
  - name: log_severity_texts
    type: '[]string'
    kind: slice
    doc: |
      LogSeverityTexts is a list of strings that the LogRecord's severity text field must match
      against.
  - name: log_severity_number
    type: '*filterconfig.LogSeverityNumberMatchProperties'
    kind: ptr
    doc: |
      LogSeverityNumber defines how to match against a log record's SeverityNumber, if defined.
    fields:
    - name: min
      type: plog.SeverityNumber
      kind: int32
      doc: |
        Min is the lowest severity that may be matched.
        e.g. if this is plog.SeverityNumberInfo, INFO, WARN, ERROR, and FATAL logs will match.
    - name: match_undefined
      kind: bool
      default: false
      doc: |
        MatchUndefined controls whether logs with "undefined" severity matches.
        If this is true, entries with undefined severity will match.
  - name: metric_names
    type: '[]string'
    kind: slice
    doc: |
      MetricNames is a list of strings to match metric name against.
      A match occurs if metric name matches at least one item in the list.
      This field is optional.
  - name: attributes
    type: '[]filterconfig.Attribute'
    kind: slice
    doc: |
      Attributes specifies the list of attributes to match against.
      All of these attributes must match exactly for a match to occur.
      Only match_type=strict is allowed if "attributes" are specified.
      This is an optional field.
    fields:
    - name: key
      kind: string
      default: ""
      doc: |
        Key specifies the attribute key.
    - name: value
      type: interface {}
      kind: interface
      doc: |
        Values specifies the value to match against.
        If it is not set, any value will match.
  - name: resources
    type: '[]filterconfig.Attribute'
    kind: slice
    doc: |
      Resources specify the list of items to match the resources against.
      A match occurs if the data's resources match at least one item in this list.
      This is an optional field.
    fields:
    - name: key
      kind: string
      default: ""
      doc: |
        Key specifies the attribute key.
    - name: value
      type: interface {}
      kind: interface
      doc: |
        Values specifies the value to match against.
        If it is not set, any value will match.
  - name: libraries
    type: '[]filterconfig.InstrumentationLibrary'
    kind: slice
    doc: |
      Libraries specify the list of items to match the implementation library against.
      A match occurs if the span's implementation library matches at least one item in this list.
      This is an optional field.
    fields:
    - name: name
      kind: string
      default: ""
    - name: version
      type: '*string'
      kind: ptr
      doc: |
        version match
         expected actual  match
         nil      <blank> yes
         nil      1       yes
         <blank>  <blank> yes
         <blank>  1       no
         1        <blank> no
         1        1       yes
  - name: span_kinds
    type: '[]string'
    kind: slice
    doc: |
      SpanKinds specify the list of items to match the span kind against.
      A match occurs if the span's span kind matches at least one item in this list.
      This is an optional field
- name: exclude
  type: '*filterconfig.MatchProperties'
  kind: ptr
  doc: |
    Exclude specifies when this processor will not be applied to the input data
    which match the specified properties.
    Note: The `exclude` properties are checked after the `include` properties,
    if they exist, are checked.
    If `include` isn't specified, the `exclude` properties are checked against
    all input data.
    This is an optional field. If neither `include` and `exclude` are set, all input data
    is processed. If `exclude` is set and `include` isn't set, then all the
    input data that does not match the properties in this structure are processed.
  fields:
  - name: match_type
    type: filterset.MatchType
    kind: string
    default: ""
  - name: regexp
    type: '*regexp.Config'
    kind: ptr
    doc: |
      Config represents the options for a NewFilterSet.
    fields:
    - name: cacheenabled
      kind: bool
      default: false
      doc: |
        CacheEnabled determines whether match results are LRU cached to make subsequent matches faster.
        Cache size is unlimited unless CacheMaxNumEntries is also specified.
    - name: cachemaxnumentries
      kind: int
      doc: |
        CacheMaxNumEntries is the max number of entries of the LRU cache that stores match results.
        CacheMaxNumEntries is ignored if CacheEnabled is false.
  - name: services
    type: '[]string'
    kind: slice
    doc: |
      Services specify the list of items to match service name against.
      A match occurs if the span's service name matches at least one item in this list.
      This is an optional field.
  - name: span_names
    type: '[]string'
    kind: slice
    doc: |
      SpanNames specify the list of items to match span name against.
      A match occurs if the span name matches at least one item in this list.
      This is an optional field.
  - name: log_bodies
    type: '[]string'
    kind: slice
    doc: |
      LogBodies is a list of strings that the LogRecord's body field must match
      against.
  - name: log_severity_texts
    type: '[]string'
    kind: slice
    doc: |
      LogSeverityTexts is a list of strings that the LogRecord's severity text field must match
      against.
  - name: log_severity_number
    type: '*filterconfig.LogSeverityNumberMatchProperties'
    kind: ptr
    doc: |
      LogSeverityNumber defines how to match against a log record's SeverityNumber, if defined.
    fields:
    - name: min
      type: plog.SeverityNumber
      kind: int32
      doc: |
        Min is the lowest severity that may be matched.
        e.g. if this is plog.SeverityNumberInfo, INFO, WARN, ERROR, and FATAL logs will match.
    - name: match_undefined
      kind: bool
      default: false
      doc: |
        MatchUndefined controls whether logs with "undefined" severity matches.
        If this is true, entries with undefined severity will match.
  - name: metric_names
    type: '[]string'
    kind: slice
    doc: |
      MetricNames is a list of strings to match metric name against.
      A match occurs if metric name matches at least one item in the list.
      This field is optional.
  - name: attributes
    type: '[]filterconfig.Attribute'
    kind: slice
    doc: |
      Attributes specifies the list of attributes to match against.
      All of these attributes must match exactly for a match to occur.
      Only match_type=strict is allowed if "attributes" are specified.
      This is an optional field.
    fields:
    - name: key
      kind: string
      default: ""
      doc: |
        Key specifies the attribute key.
    - name: value
      type: interface {}
      kind: interface
      doc: |
        Values specifies the value to match against.
        If it is not set, any value will match.
  - name: resources
    type: '[]filterconfig.Attribute'
    kind: slice
    doc: |
      Resources specify the list of items to match the resources against.
      A match occurs if the data's resources match at least one item in this list.
      This is an optional field.
    fields:
    - name: key
      kind: string
      default: ""
      doc: |
        Key specifies the attribute key.
    - name: value
      type: interface {}
      kind: interface
      doc: |
        Values specifies the value to match against.
        If it is not set, any value will match.
  - name: libraries
    type: '[]filterconfig.InstrumentationLibrary'
    kind: slice
    doc: |
      Libraries specify the list of items to match the implementation library against.
      A match occurs if the span's implementation library matches at least one item in this list.
      This is an optional field.
    fields:
    - name: name
      kind: string
      default: ""
    - name: version
      type: '*string'
      kind: ptr
      doc: |
        version match
         expected actual  match
         nil      <blank> yes
         nil      1       yes
         <blank>  <blank> yes
         <blank>  1       no
         1        <blank> no
         1        1       yes
  - name: span_kinds
    type: '[]string'
    kind: slice
    doc: |
      SpanKinds specify the list of items to match the span kind against.
      A match occurs if the span's span kind matches at least one item in this list.
      This is an optional field
- name: actions
  type: '[]attraction.ActionKeyValue'
  kind: slice
  doc: |
    Actions specifies the list of attributes to act on.
    The set of actions are {INSERT, UPDATE, UPSERT, DELETE, HASH, EXTRACT, CONVERT}.
    This is a required field.
  fields:
  - name: key
    kind: string
    default: ""
    doc: |
      Key specifies the attribute to act upon.
      This is a required field.
  - name: value
    type: interface {}
    kind: interface
    doc: |
      Value specifies the value to populate for the key.
      The type of the value is inferred from the configuration.
  - name: pattern
    kind: string
    default: ""
    doc: |
      A regex pattern  must be specified for the action EXTRACT.
      It uses the attribute specified by `key' to extract values from
      The target keys are inferred based on the names of the matcher groups
      provided and the names will be inferred based on the values of the
      matcher group.
      Note: All subexpressions must have a name.
      Note: The value type of the source key must be a string. If it isn't,
      no extraction will occur.
  - name: from_attribute
    kind: string
    default: ""
    doc: |
      FromAttribute specifies the attribute to use to populate
      the value. If the attribute doesn't exist, no action is performed.
  - name: from_context
    kind: string
    default: ""
    doc: |
      FromContext specifies the context value to use to populate
      the value. The values would be searched in client.Info.Metadata.
      If the key doesn't exist, no action is performed.
      If the key has multiple values the values will be joined with `;` separator.
  - name: converted_type
    kind: string
    default: ""
    doc: |
      ConvertedType specifies the target type of an attribute to be converted
      If the key doesn't exist, no action is performed.
      If the value cannot be converted, the original value will be left as-is
  - name: action
    type: attraction.Action
    kind: string
    default: ""
    doc: |
      Action specifies the type of action to perform.
      The set of values are {INSERT, UPDATE, UPSERT, DELETE, HASH}.
      Both lower case and upper case are supported.
      INSERT -  Inserts the key/value to attributes when the key does not exist.
                No action is applied to attributes where the key already exists.
                Either Value, FromAttribute or FromContext must be set.
      UPDATE -  Updates an existing key with a value. No action is applied
                to attributes where the key does not exist.
                Either Value, FromAttribute or FromContext must be set.
      UPSERT -  Performs insert or update action depending on the attributes
                containing the key. The key/value is inserted to attributes
                that did not originally have the key. The key/value is updated
                for attributes where the key already existed.
                Either Value, FromAttribute or FromContext must be set.
      DELETE  - Deletes the attribute. If the key doesn't exist,
                no action is performed.
      HASH    - Calculates the SHA-1 hash of an existing value and overwrites the
                value with it's SHA-1 hash result.
      EXTRACT - Extracts values using a regular expression rule from the input
                'key' to target keys specified in the 'rule'. If a target key
                already exists, it will be overridden.
      CONVERT  - converts the type of an existing attribute, if convertable
      This is a required field.
