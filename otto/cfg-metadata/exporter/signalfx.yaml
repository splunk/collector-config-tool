type: '*signalfxexporter.Config'
doc: |
  Config defines configuration for SignalFx exporter.
fields:
- name: timeout
  type: time.Duration
  kind: int64
  default: 5s
  doc: |
    Timeout is the timeout for every attempt to send data to the backend.
- name: sending_queue
  type: exporterhelper.QueueSettings
  kind: struct
  doc: |
    QueueSettings defines configuration for queueing batches before sending to the consumerSender.
  fields:
  - name: enabled
    kind: bool
    default: true
    doc: |
      Enabled indicates whether to not enqueue batches before sending to the consumerSender.
  - name: num_consumers
    kind: int
    default: 10
    doc: |
      NumConsumers is the number of consumers from the queue.
  - name: queue_size
    kind: int
    default: 5000
    doc: |
      QueueSize is the maximum number of batches allowed in queue at a given time.
  - name: storage
    type: '*config.ComponentID'
    kind: ptr
    doc: |
      StorageID if not empty, enables the persistent storage and uses the component specified
      as a storage extension for the persistent queue
- name: retry_on_failure
  type: exporterhelper.RetrySettings
  kind: struct
  doc: |
    RetrySettings defines configuration for retrying batches in case of export failure.
    The current supported strategy is exponential backoff.
  fields:
  - name: enabled
    kind: bool
    default: true
    doc: |
      Enabled indicates whether to not retry sending batches in case of export failure.
  - name: initial_interval
    type: time.Duration
    kind: int64
    default: 5s
    doc: |
      InitialInterval the time to wait after the first failure before retrying.
  - name: max_interval
    type: time.Duration
    kind: int64
    default: 30s
    doc: |
      MaxInterval is the upper bound on backoff interval. Once this value is reached the delay between
      consecutive retries will always be `MaxInterval`.
  - name: max_elapsed_time
    type: time.Duration
    kind: int64
    default: 5m0s
    doc: |
      MaxElapsedTime is the maximum amount of time (including retries) spent trying to send a request/batch.
      Once this value is reached, the data is discarded.
- name: access_token
  kind: string
  default: ""
  doc: |
    AccessToken is the authentication token provided by SignalFx.
- name: realm
  kind: string
  default: ""
  doc: |
    Realm is the SignalFx realm where data is going to be sent to.
- name: ingest_url
  kind: string
  default: ""
  doc: |
    IngestURL is the destination to where SignalFx metrics will be sent to, it is
    intended for tests and debugging. The value of Realm is ignored if the
    URL is specified. The exporter will automatically append the appropriate
    path: "/v2/datapoint" for metrics, and "/v2/event" for events.
- name: api_url
  kind: string
  default: ""
  doc: |
    APIURL is the destination to where SignalFx metadata will be sent. This
    value takes precedence over the value of Realm
- name: headers
  type: map[string]string
  kind: map
  doc: |
    Headers are a set of headers to be added to the HTTP request sending
    trace data. These can override pre-defined header values used by the
    exporter, eg: "User-Agent" can be set to a custom value if specified
    here.
- name: log_data_points
  kind: bool
  default: false
  doc: |
    Whether to log datapoints dispatched to Splunk Observability Cloud
- name: log_dimension_updates
  kind: bool
  default: false
  doc: |
    Whether to log dimension updates being sent to SignalFx.
- name: access_token_passthrough
  kind: bool
  default: true
  doc: |
    AccessTokenPassthrough indicates whether to associate datapoints with an organization access token received in request.
- name: translation_rules
  type: '[]translation.Rule'
  kind: slice
  doc: |
    TranslationRules defines a set of rules how to translate metrics to a SignalFx compatible format
    Rules defined in translation/constants.go are used by default.
  fields:
  - name: action
    type: translation.Action
    kind: string
    default: ""
    doc: |
      Action specifies the translation action to be applied on metrics.
      This is a required field.
  - name: mapping
    type: map[string]string
    kind: map
    doc: |
      Mapping specifies key/value mapping that is used by rename_dimension_keys,
      rename_metrics, copy_metrics, and split_metric actions.
  - name: scale_factors_int
    type: map[string]int64
    kind: map
    doc: |
      ScaleFactorsInt is used by multiply_int and divide_int action to scale
      integer metric values, key/value format: metric_name/scale_factor
  - name: scale_factors_float
    type: map[string]float64
    kind: map
    doc: |
      ScaleFactorsInt is used by multiply_float action to scale
      float metric values, key/value format: metric_name/scale_factor
  - name: metric_name
    kind: string
    default: ""
    doc: |
      MetricName is used by "split_metric" translation rule to specify a name
      of a metric that will be split.
  - name: dimension_key
    kind: string
    default: ""
    doc: |
      DimensionKey is used by "split_metric" translation rule action to specify dimension key
      that will be used to translate the metric datapoints. Datapoints that don't have
      the specified dimension key will not be translated.
      DimensionKey is also used by "copy_metrics" for filterring.
  - name: dimension_values
    type: map[string]bool
    kind: map
    doc: |
      DimensionValues is used by "copy_metrics" to filter out datapoints with dimensions values
      not matching values set in this field
  - name: types_mapping
    type: map[string]translation.MetricValueType
    kind: map
    doc: |
      TypesMapping is represents metric_name/metric_type key/value pairs,
      used by ActionConvertValues.
  - name: aggregation_method
    type: translation.AggregationMethod
    kind: string
    default: ""
    doc: |
      AggregationMethod specifies method used by "aggregate_metric" translation rule
  - name: without_dimensions
    type: '[]string'
    kind: slice
    doc: |
      WithoutDimensions used by "aggregate_metric" translation rule to specify dimensions to be
      excluded by aggregation.
  - name: add_dimensions
    type: map[string]string
    kind: map
    doc: |
      AddDimensions used by "rename_metrics" translation rule to add dimensions that are necessary for
      existing SFx content for desired metric name
  - name: copy_dimensions
    type: map[string]string
    kind: map
    doc: |
      CopyDimensions used by "rename_metrics" translation rule to copy dimensions that are necessary for
      existing SFx content for desired metric name.  This will duplicate the dimension value and isn't a rename.
  - name: metric_names
    type: map[string]bool
    kind: map
    doc: |
      MetricNames is used by "rename_dimension_keys" and "drop_metrics" translation rules.
  - name: operand1_metric
    kind: string
    default: ""
  - name: operand2_metric
    kind: string
    default: ""
  - name: operator
    type: translation.MetricOperator
    kind: string
    default: ""
  - name: dimension_pairs
    type: map[string]map[string]bool
    kind: map
    doc: |
      DimensionPairs used by "drop_dimensions" translation rule to specify dimension pairs that
      should be dropped.
- name: delta_translation_ttl
  kind: int64
  default: 3600
  doc: |
    DeltaTranslationTTL specifies in seconds the max duration to keep the most recent datapoint for any
    `delta_metric` specified in TranslationRules. Default is 3600s.
- name: sync_host_metadata
  kind: bool
  default: false
  doc: |
    SyncHostMetadata defines if the exporter should scrape host metadata and
    sends it as property updates to SignalFx backend.
    IMPORTANT: Host metadata synchronization relies on `resourcedetection` processor.
               If this option is enabled make sure that `resourcedetection` processor
               is enabled in the pipeline with one of the cloud provider detectors
               or environment variable detector setting a unique value to
               `host.name` attribute within your k8s cluster. Also keep override
               And keep `override=true` in resourcedetection config.
- name: exclude_metrics
  type: '[]dpfilters.MetricFilter'
  kind: slice
  doc: |
    ExcludeMetrics defines dpfilter.MetricFilters that will determine metrics to be
    excluded from sending to SignalFx backend. If translations enabled with
    TranslationRules options, the exclusion will be applie on translated metrics.
  fields:
  - name: metric_name
    kind: string
    default: ""
    doc: |
      A single metric name to match against.
  - name: metric_names
    type: '[]string'
    kind: slice
    doc: |
      A list of metric names to match against.
  - name: dimensions
    type: map[string]interface {}
    kind: map
    doc: |
      A map of dimension key/values to match against. All key/values must
      match a datapoint for it to be matched. The map values can be either
      a single string or a list of strings.
- name: include_metrics
  type: '[]dpfilters.MetricFilter'
  kind: slice
  doc: |
    IncludeMetrics defines dpfilter.MetricFilters to override exclusion any of metric.
    This option can be used to included metrics that are otherwise dropped by default.
    See ./translation/default_metrics.go for a list of metrics that are dropped by default.
  fields:
  - name: metric_name
    kind: string
    default: ""
    doc: |
      A single metric name to match against.
  - name: metric_names
    type: '[]string'
    kind: slice
    doc: |
      A list of metric names to match against.
  - name: dimensions
    type: map[string]interface {}
    kind: map
    doc: |
      A map of dimension key/values to match against. All key/values must
      match a datapoint for it to be matched. The map values can be either
      a single string or a list of strings.
- name: correlation
  type: '*correlation.Config'
  kind: ptr
  doc: |
    Correlation configuration for syncing traces service and environment to metrics.
  fields:
  - name: endpoint
    kind: string
    default: ""
    doc: |
      The target URL to send data to (e.g.: http://some.url:9411/v1/traces).
  - name: tls
    type: configtls.TLSClientSetting
    kind: struct
    doc: |
      TLSSetting struct exposes TLS client configuration.
    fields:
    - name: ca_file
      kind: string
      default: ""
      doc: |
        Path to the CA cert. For a client this verifies the server certificate.
        For a server this verifies client certificates. If empty uses system root CA.
        (optional)
    - name: cert_file
      kind: string
      default: ""
      doc: |
        Path to the TLS cert to use for TLS required connections. (optional)
    - name: key_file
      kind: string
      default: ""
      doc: |
        Path to the TLS key to use for TLS required connections. (optional)
    - name: min_version
      kind: string
      default: ""
      doc: |
        MinVersion sets the minimum TLS version that is acceptable.
        If not set, TLS 1.2 will be used. (optional)
    - name: max_version
      kind: string
      default: ""
      doc: |
        MaxVersion sets the maximum TLS version that is acceptable.
        If not set, refer to crypto/tls for defaults. (optional)
    - name: reload_interval
      type: time.Duration
      kind: int64
      doc: |
        ReloadInterval specifies the duration after which the certificate will be reloaded
        If not set, it will never be reloaded (optional)
    - name: insecure
      kind: bool
      default: false
      doc: |
        In gRPC when set to true, this is used to disable the client transport security.
        See https://godoc.org/google.golang.org/grpc#WithInsecure.
        In HTTP, this disables verifying the server's certificate chain and host name
        (InsecureSkipVerify in the tls Config). Please refer to
        https://godoc.org/crypto/tls#Config for more information.
        (optional, default false)
    - name: insecure_skip_verify
      kind: bool
      default: false
      doc: |
        InsecureSkipVerify will enable TLS but not verify the certificate.
    - name: server_name_override
      kind: string
      default: ""
      doc: |
        ServerName requested by client for virtual hosting.
        This sets the ServerName in the TLSConfig. Please refer to
        https://godoc.org/crypto/tls#Config for more information. (optional)
  - name: read_buffer_size
    kind: int
    doc: |
      ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.
  - name: write_buffer_size
    kind: int
    doc: |
      WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.
  - name: timeout
    type: time.Duration
    kind: int64
    default: 5s
    doc: |
      Timeout parameter configures `http.Client.Timeout`.
  - name: headers
    type: map[string]string
    kind: map
    doc: |
      Additional headers attached to each HTTP request sent by the client.
      Existing header values are overwritten if collision happens.
  - name: customroundtripper
    type: func(http.RoundTripper) (http.RoundTripper, error)
    kind: func
    doc: |
      Custom Round Tripper to allow for individual components to intercept HTTP requests
  - name: auth
    type: '*configauth.Authentication'
    kind: ptr
    doc: |
      Auth configuration for outgoing HTTP calls.
    fields:
    - name: authenticator
      type: config.ComponentID
      kind: struct
      doc: |
        AuthenticatorID specifies the name of the extension to use in order to authenticate the incoming data point.
  - name: compression
    type: configcompression.CompressionType
    kind: string
    default: ""
    doc: |
      The compression key for supported compression types within collector.
  - name: max_idle_conns
    type: '*int'
    kind: ptr
    doc: |
      MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.
      There's an already set value, and we want to override it only if an explicit value provided
  - name: max_idle_conns_per_host
    type: '*int'
    kind: ptr
    doc: |
      MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.
      There's an already set value, and we want to override it only if an explicit value provided
  - name: max_conns_per_host
    type: '*int'
    kind: ptr
    doc: |
      MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,
      active, and idle states.
      There's an already set value, and we want to override it only if an explicit value provided
  - name: idle_conn_timeout
    type: '*time.Duration'
    kind: ptr
    doc: |
      IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.
      There's an already set value, and we want to override it only if an explicit value provided
  - name: max_requests
    kind: uint
    default: 20
  - name: max_buffered
    kind: uint
    default: 10000
  - name: max_retries
    kind: uint
    default: 2
  - name: log_updates
    kind: bool
    default: false
  - name: retry_delay
    type: time.Duration
    kind: int64
    default: 30s
  - name: cleanup_interval
    type: time.Duration
    kind: int64
    default: 1m0s
  - name: stale_service_timeout
    type: time.Duration
    kind: int64
    default: 5m0s
    doc: |
      How long to wait after a trace span's service name is last seen before
      uncorrelating that service.
  - name: sync_attributes
    type: map[string]string
    kind: map
    doc: |
      SyncAttributes is a key of the span attribute name to sync to the dimension as the value.
- name: nonalphanumeric_dimension_chars
  kind: string
  default: _-.
  doc: |
    NonAlphanumericDimensionChars is a list of allowable characters, in addition to alphanumeric ones,
    to be used in a dimension key.
- name: max_connections
  kind: int
  default: 100
  doc: |
    MaxConnections is used to set a limit to the maximum idle HTTP connection the exporter can keep open.
