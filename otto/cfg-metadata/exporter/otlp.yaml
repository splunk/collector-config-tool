type: '*otlpexporter.Config'
doc: |
  Config defines configuration for OpenCensus exporter.
fields:
- name: timeout
  type: time.Duration
  kind: int64
  default: 5s
  doc: |
    Timeout is the timeout for every attempt to send data to the backend.
- name: sending_queue
  type: exporterhelper.QueueSettings
  kind: struct
  doc: |
    QueueSettings defines configuration for queueing batches before sending to the consumerSender.
  fields:
  - name: enabled
    kind: bool
    default: true
    doc: |
      Enabled indicates whether to not enqueue batches before sending to the consumerSender.
  - name: num_consumers
    kind: int
    default: 10
    doc: |
      NumConsumers is the number of consumers from the queue.
  - name: queue_size
    kind: int
    default: 5000
    doc: |
      QueueSize is the maximum number of batches allowed in queue at a given time.
  - name: storage
    type: '*config.ComponentID'
    kind: ptr
    doc: |
      StorageID if not empty, enables the persistent storage and uses the component specified
      as a storage extension for the persistent queue
- name: retry_on_failure
  type: exporterhelper.RetrySettings
  kind: struct
  doc: |
    RetrySettings defines configuration for retrying batches in case of export failure.
    The current supported strategy is exponential backoff.
  fields:
  - name: enabled
    kind: bool
    default: true
    doc: |
      Enabled indicates whether to not retry sending batches in case of export failure.
  - name: initial_interval
    type: time.Duration
    kind: int64
    default: 5s
    doc: |
      InitialInterval the time to wait after the first failure before retrying.
  - name: max_interval
    type: time.Duration
    kind: int64
    default: 30s
    doc: |
      MaxInterval is the upper bound on backoff interval. Once this value is reached the delay between
      consecutive retries will always be `MaxInterval`.
  - name: max_elapsed_time
    type: time.Duration
    kind: int64
    default: 5m0s
    doc: |
      MaxElapsedTime is the maximum amount of time (including retries) spent trying to send a request/batch.
      Once this value is reached, the data is discarded.
- name: endpoint
  kind: string
  default: ""
  doc: |
    The target to which the exporter is going to send traces or metrics,
    using the gRPC protocol. The valid syntax is described at
    https://github.com/grpc/grpc/blob/master/doc/naming.md.
- name: compression
  type: configcompression.CompressionType
  kind: string
  default: gzip
  doc: |
    The compression key for supported compression types within collector.
- name: tls
  type: configtls.TLSClientSetting
  kind: struct
  doc: |
    TLSSetting struct exposes TLS client configuration.
  fields:
  - name: ca_file
    kind: string
    default: ""
    doc: |
      Path to the CA cert. For a client this verifies the server certificate.
      For a server this verifies client certificates. If empty uses system root CA.
      (optional)
  - name: cert_file
    kind: string
    default: ""
    doc: |
      Path to the TLS cert to use for TLS required connections. (optional)
  - name: key_file
    kind: string
    default: ""
    doc: |
      Path to the TLS key to use for TLS required connections. (optional)
  - name: min_version
    kind: string
    default: ""
    doc: |
      MinVersion sets the minimum TLS version that is acceptable.
      If not set, TLS 1.2 will be used. (optional)
  - name: max_version
    kind: string
    default: ""
    doc: |
      MaxVersion sets the maximum TLS version that is acceptable.
      If not set, refer to crypto/tls for defaults. (optional)
  - name: reload_interval
    type: time.Duration
    kind: int64
    doc: |
      ReloadInterval specifies the duration after which the certificate will be reloaded
      If not set, it will never be reloaded (optional)
  - name: insecure
    kind: bool
    default: false
    doc: |
      In gRPC when set to true, this is used to disable the client transport security.
      See https://godoc.org/google.golang.org/grpc#WithInsecure.
      In HTTP, this disables verifying the server's certificate chain and host name
      (InsecureSkipVerify in the tls Config). Please refer to
      https://godoc.org/crypto/tls#Config for more information.
      (optional, default false)
  - name: insecure_skip_verify
    kind: bool
    default: false
    doc: |
      InsecureSkipVerify will enable TLS but not verify the certificate.
  - name: server_name_override
    kind: string
    default: ""
    doc: |
      ServerName requested by client for virtual hosting.
      This sets the ServerName in the TLSConfig. Please refer to
      https://godoc.org/crypto/tls#Config for more information. (optional)
- name: keepalive
  type: '*configgrpc.KeepaliveClientConfig'
  kind: ptr
  doc: |
    The keepalive parameters for gRPC client. See grpc.WithKeepaliveParams.
    (https://godoc.org/google.golang.org/grpc#WithKeepaliveParams).
  fields:
  - name: time
    type: time.Duration
    kind: int64
  - name: timeout
    type: time.Duration
    kind: int64
  - name: permit_without_stream
    kind: bool
    default: false
- name: read_buffer_size
  kind: int
  doc: |
    ReadBufferSize for gRPC client. See grpc.WithReadBufferSize.
    (https://godoc.org/google.golang.org/grpc#WithReadBufferSize).
- name: write_buffer_size
  kind: int
  default: 524288
  doc: |
    WriteBufferSize for gRPC gRPC. See grpc.WithWriteBufferSize.
    (https://godoc.org/google.golang.org/grpc#WithWriteBufferSize).
- name: wait_for_ready
  kind: bool
  default: false
  doc: |
    WaitForReady parameter configures client to wait for ready state before sending data.
    (https://github.com/grpc/grpc/blob/master/doc/wait-for-ready.md)
- name: headers
  type: map[string]string
  kind: map
  doc: |
    The headers associated with gRPC requests.
- name: balancer_name
  kind: string
  default: ""
  doc: |
    Sets the balancer in grpclb_policy to discover the servers. Default is pick_first.
    https://github.com/grpc/grpc-go/blob/master/examples/features/load_balancing/README.md
- name: auth
  type: '*configauth.Authentication'
  kind: ptr
  doc: |
    Auth configuration for outgoing RPCs.
  fields:
  - name: authenticator
    type: config.ComponentID
    kind: struct
    doc: |
      AuthenticatorID specifies the name of the extension to use in order to authenticate the incoming data point.
