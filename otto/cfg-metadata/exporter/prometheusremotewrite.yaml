type: '*prometheusremotewriteexporter.Config'
doc: |
  Config defines configuration for Remote Write exporter.
fields:
- name: timeout
  type: time.Duration
  kind: int64
  default: 5s
  doc: |
    Timeout is the timeout for every attempt to send data to the backend.
- name: retry_on_failure
  type: exporterhelper.RetrySettings
  kind: struct
  doc: |
    RetrySettings defines configuration for retrying batches in case of export failure.
    The current supported strategy is exponential backoff.
  fields:
  - name: enabled
    kind: bool
    default: true
    doc: |
      Enabled indicates whether to not retry sending batches in case of export failure.
  - name: initial_interval
    type: time.Duration
    kind: int64
    default: 50ms
    doc: |
      InitialInterval the time to wait after the first failure before retrying.
  - name: max_interval
    type: time.Duration
    kind: int64
    default: 200ms
    doc: |
      MaxInterval is the upper bound on backoff interval. Once this value is reached the delay between
      consecutive retries will always be `MaxInterval`.
  - name: max_elapsed_time
    type: time.Duration
    kind: int64
    default: 1m0s
    doc: |
      MaxElapsedTime is the maximum amount of time (including retries) spent trying to send a request/batch.
      Once this value is reached, the data is discarded.
- name: namespace
  kind: string
  default: ""
  doc: |
    prefix attached to each exported metric name
    See: https://prometheus.io/docs/practices/naming/#metric-names
- name: remote_write_queue
  type: prometheusremotewriteexporter.RemoteWriteQueue
  kind: struct
  doc: |
    QueueConfig allows users to fine tune the queues
    that handle outgoing requests.
  fields:
  - name: enabled
    kind: bool
    default: true
    doc: |
      Enabled if false the queue is not enabled, the export requests
      are executed synchronously.
  - name: queue_size
    kind: int
    default: 10000
    doc: |
      QueueSize is the maximum number of OTLP metric batches allowed
      in the queue at a given time. Ignored if Enabled is false.
  - name: num_consumers
    kind: int
    default: 5
    doc: |
      NumWorkers configures the number of workers used by
      the collector to fan out remote write requests.
- name: external_labels
  type: map[string]string
  kind: map
  doc: |
    ExternalLabels defines a map of label keys and values that are allowed to start with reserved prefix "__"
- name: endpoint
  kind: string
  default: http://some.url:9411/api/prom/push
  doc: |
    The target URL to send data to (e.g.: http://some.url:9411/v1/traces).
- name: tls
  type: configtls.TLSClientSetting
  kind: struct
  doc: |
    TLSSetting struct exposes TLS client configuration.
  fields:
  - name: ca_file
    kind: string
    default: ""
    doc: |
      Path to the CA cert. For a client this verifies the server certificate.
      For a server this verifies client certificates. If empty uses system root CA.
      (optional)
  - name: cert_file
    kind: string
    default: ""
    doc: |
      Path to the TLS cert to use for TLS required connections. (optional)
  - name: key_file
    kind: string
    default: ""
    doc: |
      Path to the TLS key to use for TLS required connections. (optional)
  - name: min_version
    kind: string
    default: ""
    doc: |
      MinVersion sets the minimum TLS version that is acceptable.
      If not set, TLS 1.2 will be used. (optional)
  - name: max_version
    kind: string
    default: ""
    doc: |
      MaxVersion sets the maximum TLS version that is acceptable.
      If not set, refer to crypto/tls for defaults. (optional)
  - name: reload_interval
    type: time.Duration
    kind: int64
    doc: |
      ReloadInterval specifies the duration after which the certificate will be reloaded
      If not set, it will never be reloaded (optional)
  - name: insecure
    kind: bool
    default: false
    doc: |
      In gRPC when set to true, this is used to disable the client transport security.
      See https://godoc.org/google.golang.org/grpc#WithInsecure.
      In HTTP, this disables verifying the server's certificate chain and host name
      (InsecureSkipVerify in the tls Config). Please refer to
      https://godoc.org/crypto/tls#Config for more information.
      (optional, default false)
  - name: insecure_skip_verify
    kind: bool
    default: false
    doc: |
      InsecureSkipVerify will enable TLS but not verify the certificate.
  - name: server_name_override
    kind: string
    default: ""
    doc: |
      ServerName requested by client for virtual hosting.
      This sets the ServerName in the TLSConfig. Please refer to
      https://godoc.org/crypto/tls#Config for more information. (optional)
- name: read_buffer_size
  kind: int
  doc: |
    ReadBufferSize for HTTP client. See http.Transport.ReadBufferSize.
- name: write_buffer_size
  kind: int
  default: 524288
  doc: |
    WriteBufferSize for HTTP client. See http.Transport.WriteBufferSize.
- name: timeout
  type: time.Duration
  kind: int64
  default: 5s
  doc: |
    Timeout parameter configures `http.Client.Timeout`.
- name: headers
  type: map[string]string
  kind: map
  doc: |
    Additional headers attached to each HTTP request sent by the client.
    Existing header values are overwritten if collision happens.
- name: customroundtripper
  type: func(http.RoundTripper) (http.RoundTripper, error)
  kind: func
  doc: |
    Custom Round Tripper to allow for individual components to intercept HTTP requests
- name: auth
  type: '*configauth.Authentication'
  kind: ptr
  doc: |
    Auth configuration for outgoing HTTP calls.
  fields:
  - name: authenticator
    type: config.ComponentID
    kind: struct
    doc: |
      AuthenticatorID specifies the name of the extension to use in order to authenticate the incoming data point.
- name: compression
  type: configcompression.CompressionType
  kind: string
  default: ""
  doc: |
    The compression key for supported compression types within collector.
- name: max_idle_conns
  type: '*int'
  kind: ptr
  doc: |
    MaxIdleConns is used to set a limit to the maximum idle HTTP connections the client can keep open.
    There's an already set value, and we want to override it only if an explicit value provided
- name: max_idle_conns_per_host
  type: '*int'
  kind: ptr
  doc: |
    MaxIdleConnsPerHost is used to set a limit to the maximum idle HTTP connections the host can keep open.
    There's an already set value, and we want to override it only if an explicit value provided
- name: max_conns_per_host
  type: '*int'
  kind: ptr
  doc: |
    MaxConnsPerHost limits the total number of connections per host, including connections in the dialing,
    active, and idle states.
    There's an already set value, and we want to override it only if an explicit value provided
- name: idle_conn_timeout
  type: '*time.Duration'
  kind: ptr
  doc: |
    IdleConnTimeout is the maximum amount of time a connection will remain open before closing itself.
    There's an already set value, and we want to override it only if an explicit value provided
- name: resource_to_telemetry_conversion
  type: resourcetotelemetry.Settings
  kind: struct
  doc: |
    ResourceToTelemetrySettings is the option for converting resource attributes to telemetry attributes.
    "Enabled" - A boolean field to enable/disable this option. Default is `false`.
    If enabled, all the resource attributes will be converted to metric labels by default.
  fields:
  - name: enabled
    kind: bool
    default: false
    doc: |
      Enabled indicates whether to convert resource attributes to telemetry attributes. Default is `false`.
- name: wal
  type: '*prometheusremotewriteexporter.WALConfig'
  kind: ptr
  fields:
  - name: directory
    kind: string
    default: ""
  - name: buffer_size
    kind: int
  - name: truncate_frequency
    type: time.Duration
    kind: int64
- name: target_info
  type: '*prometheusremotewriteexporter.TargetInfo'
  kind: ptr
  doc: |
    TargetInfo allows customizing the target_info metric
  fields:
  - name: enabled
    kind: bool
    default: true
    doc: |
      Enabled if false the target_info metric is not generated by the exporter
